[tool.poetry]
name = "practice_appform"
version = "1.0.1"
description = "pythonテンプレート"
authors = ["Taku Ikegami"]

[tool.poetry.dependencies]
python = "^3.10.8"
Django = "^4.1.3"
psycopg2 = "^2.9.5"
djangorestframework = "^3.14.0"
boto3 = "^1.26.79"
injector = "^0.20.1"
django-filter = "^22.1"
pydantic = "^1.10.6"
django-ulid = "^0.0.4"
django-cors-headers = "^3.14.0"
gunicorn = "^20.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pylint = "^2.15.5"
pytest-cov = "^4.0.0"
toml = "^0.10.2"
black = "^22.10.0"
isort = "^5.10.1"
pdoc3 = "^0.10.0"
mypy = "^0.991"
pytest-mock = "^3.10.0"
pytest-django = "^4.5.2"
drf-spectacular = "^0.25.1"
pytest-clarity = "^1.0.1"
pytest-randomly = "^3.12.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
include = '\.py$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

# 型チェックの設定
[tool.mypy]
packages = ["application"]
ignore_missing_imports = true
disallow_untyped_defs = true
check_untyped_defs = true


# logの設定（local環境）
[local.logging]
version = 1
[local.logging.formatters.simple]
format = "[%(levelname)s] %(name)s %(asctime)s - %(message)s "
[local.logging.handlers.consoleHandler]
class = "logging.StreamHandler"
level = "DEBUG"
formatter = "simple"
stream = "ext://sys.stdout"
[local.logging.handlers.applicationHandler]
class = "logging.handlers.TimedRotatingFileHandler"
when = "D"
level = "INFO"
formatter = "simple"
filename = "./output/application.log"
[local.logging.handlers.errorHandler]
class = "logging.handlers.TimedRotatingFileHandler"
when = "D"
level = "ERROR"
formatter = "simple"
filename = "./output/emergency.log"
[local.logging.loggers.console]
level = "DEBUG"
handlers = ["consoleHandler"]
propagate = "no"
[local.logging.loggers.application]
level = "DEBUG"
handlers = ["consoleHandler","applicationHandler"]
propagate = "no"
[local.logging.loggers.emergency]
level = "DEBUG"
handlers = ["consoleHandler","errorHandler"]
propagate = "no"

# logの設定（dev環境）
[dev.logging]
version = 1
[dev.logging.formatters.simple]
format = "[%(levelname)s] %(name)s - %(message)s "
[dev.logging.handlers.consoleHandler]
class = "logging.StreamHandler"
level = "DEBUG"
formatter = "simple"
stream = "ext://sys.stdout"
[dev.logging.loggers.console]
level = "DEBUG"
handlers = ["consoleHandler"]
propagate = "no"
[dev.logging.loggers.application]
level = "DEBUG"
handlers = ["consoleHandler"]
propagate = "no"
[dev.logging.loggers.emergency]
level = "DEBUG"
handlers = ["consoleHandler"]
propagate = "no"

# pytest.iniの設定
[tool.pytest.ini_options]
addopts = "-ra -p no:cacheprovider --strict-config --strict-markers -vv --diff-width=60"
DJANGO_SETTINGS_MODULE = "application.settings.local"

# .coveragercの設定
[tool.coverage.run]
branch = true
source = ["common/", "crm"]
omit = ["manage.py", "*/tests/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self\\.debug",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "@(abc\\.)?abstractmethod",
]
ignore_errors = true


[tool.coverage.html]
directory = "htmlcov"